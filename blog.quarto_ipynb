{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"A Replication of Karlan and List (2007)\"\n",
        "author: \"Dingran Wang\"\n",
        "date: 04/21/2025\n",
        "callout-appearance: minimal # this hides the blue \"i\" icon on .callout-notes\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2).\n",
        "\n",
        "To explore how different fundraising strategies influence donor behavior, Karlan and List leveraged a natural field experiment in collaboration with a real nonprofit organization. The 50,000 prior donors were randomly assigned to receive one of several versions of a direct mail solicitation. The control group received a standard appeal, while treatment groups received letters offering matching grants at different match ratios—1:1, 2:1, or 3:1. Each variation also manipulated the suggested donation amount and the maximum size of the matching gift. By analyzing the response rate and donation amounts across treatments, the authors were able to isolate the causal impact of these fundraising tactics on charitable giving.\n",
        "\n",
        "This project seeks to replicate their results.\n",
        "\n",
        "\n",
        "## Data\n",
        "\n",
        "### Description"
      ],
      "id": "7a75e0e9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_stata(\"/Users/danielwang/Desktop/UCSD Spring/MGTA495 Marketing Analytics/Website/data/karlan_list_2007.dta\")"
      ],
      "id": "3025893a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::: {.callout-note collapse=\"true\"}\n",
        "### Variable Definitions\n",
        "\n",
        "| Variable             | Description                                                         |\n",
        "|----------------------|---------------------------------------------------------------------|\n",
        "| `treatment`          | Treatment                                                           |\n",
        "| `control`            | Control                                                             |\n",
        "| `ratio`              | Match ratio                                                         |\n",
        "| `ratio2`             | 2:1 match ratio                                                     |\n",
        "| `ratio3`             | 3:1 match ratio                                                     |\n",
        "| `size`               | Match threshold                                                     |\n",
        "| `size25`             | \\$25,000 match threshold                                            |\n",
        "| `size50`             | \\$50,000 match threshold                                            |\n",
        "| `size100`            | \\$100,000 match threshold                                           |\n",
        "| `sizeno`             | Unstated match threshold                                            |\n",
        "| `ask`                | Suggested donation amount                                           |\n",
        "| `askd1`              | Suggested donation was highest previous contribution                |\n",
        "| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |\n",
        "| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |\n",
        "| `ask1`               | Highest previous contribution (for suggestion)                      |\n",
        "| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |\n",
        "| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |\n",
        "| `amount`             | Dollars given                                                       |\n",
        "| `gave`               | Gave anything                                                       |\n",
        "| `amountchange`       | Change in amount given                                              |\n",
        "| `hpa`                | Highest previous contribution                                       |\n",
        "| `ltmedmra`           | Small prior donor: last gift was less than median \\$35              |\n",
        "| `freq`               | Number of prior donations                                           |\n",
        "| `years`              | Number of years since initial donation                              |\n",
        "| `year5`              | At least 5 years since initial donation                             |\n",
        "| `mrm2`               | Number of months since last donation                                |\n",
        "| `dormant`            | Already donated in 2005                                             |\n",
        "| `female`             | Female                                                              |\n",
        "| `couple`             | Couple                                                              |\n",
        "| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |\n",
        "| `nonlit`             | Nonlitigation                                                       |\n",
        "| `cases`              | Court cases from state in 2004-5 in which organization was involved |\n",
        "| `statecnt`           | Percent of sample from state                                        |\n",
        "| `stateresponse`      | Proportion of sample from the state who gave                        |\n",
        "| `stateresponset`     | Proportion of treated sample from the state who gave                |\n",
        "| `stateresponsec`     | Proportion of control sample from the state who gave                |\n",
        "| `stateresponsetminc` | stateresponset - stateresponsec                                     |\n",
        "| `perbush`            | State vote share for Bush                                           |\n",
        "| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |\n",
        "| `red0`               | Red state                                                           |\n",
        "| `blue0`              | Blue state                                                          |\n",
        "| `redcty`             | Red county                                                          |\n",
        "| `bluecty`            | Blue county                                                         |\n",
        "| `pwhite`             | Proportion white within zip code                                    |\n",
        "| `pblack`             | Proportion black within zip code                                    |\n",
        "| `page18_39`          | Proportion age 18-39 within zip code                                |\n",
        "| `ave_hh_sz`          | Average household size within zip code                              |\n",
        "| `median_hhincome`    | Median household income within zip code                             |\n",
        "| `powner`             | Proportion house owner within zip code                              |\n",
        "| `psch_atlstba`       | Proportion who finished college within zip code                     |\n",
        "| `pop_propurban`      | Proportion of population urban within zip code                      |\n",
        "\n",
        "::::\n",
        "\n",
        "\n",
        "### Balance Test \n",
        "\n",
        "As an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another."
      ],
      "id": "fbaf2018"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import statsmodels.api as sm\n",
        "from scipy import stats\n",
        "\n",
        "# Load data\n",
        "df = pd.read_stata(\"karlan_list_2007.dta\")\n",
        "df['treat'] = df['treatment'].fillna(0)\n",
        "\n",
        "# Balance test function\n",
        "def balance_test(var):\n",
        "    df_sub = df[['treat', var]].dropna()\n",
        "    treat_group = df_sub[df_sub['treat'] == 1][var]\n",
        "    control_group = df_sub[df_sub['treat'] == 0][var]\n",
        "    \n",
        "    # T-test\n",
        "    t_stat, p_val = stats.ttest_ind(treat_group, control_group, equal_var=True)\n",
        "    mean_diff = treat_group.mean() - control_group.mean()\n",
        "\n",
        "    print(f\"\\n==== Balance Test for '{var}' ====\")\n",
        "    print(f\"T-test:\")\n",
        "    print(f\"  Mean (Treatment): {treat_group.mean():.3f}\")\n",
        "    print(f\"  Mean (Control):   {control_group.mean():.3f}\")\n",
        "    print(f\"  Difference:       {mean_diff:.3f}\")\n",
        "    print(f\"  t-statistic:      {t_stat:.3f}\")\n",
        "    print(f\"  p-value:          {p_val:.4f}\")\n",
        "\n",
        "    # OLS\n",
        "    X = sm.add_constant(df_sub['treat'])\n",
        "    model = sm.OLS(df_sub[var], X).fit()\n",
        "    print(\"\\nOLS Regression:\")\n",
        "    print(model.summary().tables[1])\n",
        "\n",
        "# Run tests\n",
        "for var in ['mrm2', 'freq', 'hpa']:\n",
        "    balance_test(var)\n"
      ],
      "id": "c6b7288c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Experimental Results\n",
        "Variable | Mean (Treatment) | Mean (Control) | Difference | t-stat | p-value | Significant?\n",
        "mrm2 | 13.012 | 12.998 | +0.014 | 0.119 | 0.9049 | ❌\n",
        "freq | 8.035 | 8.047 | -0.012 | -0.111 | 0.9117 | ❌\n",
        "hpa | 59.597 | 58.960 | +0.637 | 0.944 | 0.3451 | ❌\n",
        "\n",
        "In all cases, the null hypothesis of equal means cannot be rejected, and both t-tests and OLS regressions yield identical conclusions. The treatment assignment is statistically uncorrelated with these pre-treatment variables, providing strong evidence that the randomization mechanism worked as intended.\n",
        "\n",
        "Why this matters: Table 1 in Karlan & List (2007) serves the same purpose—showing that groups were well-balanced at baseline. This is essential for internal validity: it ensures that any post-treatment differences in giving behavior can be credibly attributed to the treatment itself, not to pre-existing differences between donors.\n",
        "\n",
        "\n",
        "### Charitable Contribution Made\n",
        "\n",
        "First, I analyze whether matched donations lead to an increased response rate of making a donation. "
      ],
      "id": "3a236cd5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create treatment indicator\n",
        "df['treat'] = df['treatment'].fillna(0)\n",
        "\n",
        "# Group by treatment and compute mean of 'gave' (binary)\n",
        "prop_donated = df.groupby('treat')['gave'].mean()\n",
        "\n",
        "# Plot\n",
        "plt.bar(['Control', 'Treatment'], prop_donated, edgecolor='black')\n",
        "plt.title(\"Proportion of Donors by Treatment Group\")\n",
        "plt.ylabel(\"Proportion Who Donated\")\n",
        "plt.ylim(0, 0.03)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.show()"
      ],
      "id": "e9fa98a6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The barplot below shows that 2.20% of individuals in the treatment group donated, compared to 1.79% in the control group.\n"
      ],
      "id": "811ddbfc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# T-test\n",
        "gave_treat = df[df['treat'] == 1]['gave']\n",
        "gave_control = df[df['treat'] == 0]['gave']\n",
        "t_stat, p_val = stats.ttest_ind(gave_treat, gave_control, equal_var=True)\n",
        "\n",
        "print(\"T-test results:\")\n",
        "print(f\"  Mean (Treatment): {gave_treat.mean():.4f}\")\n",
        "print(f\"  Mean (Control):   {gave_control.mean():.4f}\")\n",
        "print(f\"  Difference:       {gave_treat.mean() - gave_control.mean():.4f}\")\n",
        "print(f\"  t-statistic:      {t_stat:.3f}\")\n",
        "print(f\"  p-value:          {p_val:.4f}\")\n",
        "\n",
        "# OLS regression\n",
        "X = sm.add_constant(df['treat'])\n",
        "ols_model = sm.OLS(df['gave'], X).fit()\n",
        "print(\"\\nOLS Regression:\")\n",
        "print(ols_model.summary().tables[1])"
      ],
      "id": "4ab1c993",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "T-test:\n",
        "  Mean (Treatment): 0.0220\n",
        "  Mean (Control):   0.0179\n",
        "  Difference:       0.0042\n",
        "  t-statistic:      3.101\n",
        "  p-value:          0.0019\n",
        "\n",
        "OLS Regression:\n",
        "  Coefficient on treatment: 0.0042\n",
        "  p-value:                  0.002\n",
        "\n",
        "The t-test and regression agree: the difference is statistically significant at the 1% level. Offering a matching grant increased the response rate by about 0.42 percentage points, which is approximately a 22% increase relative to the control group's donation rate.\n"
      ],
      "id": "aa12c1f2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Probit model\n",
        "probit_model = sm.Probit(df['gave'], X).fit()\n",
        "print(probit_model.summary())"
      ],
      "id": "a91994f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Probit Coefficient on treatment: 0.0868\n",
        "z-statistic: 3.113\n",
        "p-value:     0.002\n",
        "\n",
        "This replicates Table 3, Column 1 in the original paper, confirming that the treatment has a positive and statistically significant effect on the probability of donating.\n",
        "\n",
        "These results show that simply informing potential donors that their gift would be matched made them more likely to give. Even though the absolute increase in donation rate is small, the relative effect is large and meaningful for fundraisers.\n",
        "\n",
        "This supports the idea that donors are motivated not only by altruism, but also by how effective or impactful their contribution feels. The matching grant may act as a psychological signal that \"now is a good time to give\" or that their donation is more valuable than usual.\n",
        "\n",
        "\n",
        "### Differences between Match Rates\n",
        "\n",
        "Next, I assess the effectiveness of different sizes of matched donations on the response rate."
      ],
      "id": "b423d378"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 只对 treatment 组分析\n",
        "treat_df = df[df['treat'] == 1].copy()\n",
        "\n",
        "# 比较 1:1 vs 2:1\n",
        "gave_1 = treat_df[treat_df['ratio'] == 1]['gave']\n",
        "gave_2 = treat_df[treat_df['ratio'] == 2]['gave']\n",
        "t12, p12 = stats.ttest_ind(gave_1, gave_2)\n",
        "\n",
        "# 比较 2:1 vs 3:1\n",
        "gave_3 = treat_df[treat_df['ratio'] == 3]['gave']\n",
        "t23, p23 = stats.ttest_ind(gave_2, gave_3)\n",
        "\n",
        "print(f\"1:1 vs 2:1 match rate — p = {p12:.4f}\")\n",
        "print(f\"2:1 vs 3:1 match rate — p = {p23:.4f}\")\n",
        "print(f\"Means: 1:1 = {gave_1.mean():.4f}, 2:1 = {gave_2.mean():.4f}, 3:1 = {gave_3.mean():.4f}\")"
      ],
      "id": "ee900b93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "T-tests Between Match Ratios\n",
        "\n",
        "1:1 vs 2:1 — p = 0.3345\n",
        "2:1 vs 3:1 — p = 0.9600\n",
        "Means: \n",
        "  1:1 = 0.0207\n",
        "  2:1 = 0.0226\n",
        "  3:1 = 0.0227\n",
        "\n",
        "The results show no statistically significant differences in donation rates between the match levels. While there is a slight increase in the mean from 1:1 to 2:1 and 3:1, the p-values (0.33 and 0.96) confirm that these differences are not distinguishable from zero at conventional significance levels.\n"
      ],
      "id": "835e796b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 创建 dummy 变量\n",
        "treat_df['ratio1'] = (treat_df['ratio'] == 1).astype(int)\n",
        "treat_df['ratio2'] = (treat_df['ratio'] == 2).astype(int)\n",
        "treat_df['ratio3'] = (treat_df['ratio'] == 3).astype(int)\n",
        "\n",
        "# 用 ratio1 作为基准组\n",
        "X = sm.add_constant(treat_df[['ratio2', 'ratio3']])\n",
        "y = treat_df['gave']\n",
        "ratio_model = sm.OLS(y, X).fit()\n",
        "print(ratio_model.summary().tables[1])"
      ],
      "id": "0253e839",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Regression on Match Ratio Dummies\n",
        "\n",
        "Regression of `gave` on ratio2 and ratio3 (baseline = 1:1):\n",
        "ratio2 coefficient:  +0.0019 (p = 0.338)  \n",
        "ratio3 coefficient:  +0.0020 (p = 0.313)\n",
        "\n",
        "This regression supports the t-test findings. Neither the 2:1 nor 3:1 match ratio has a statistically significant effect relative to the 1:1 match. This aligns closely with Karlan & List’s statement that “larger match ratios… had no additional impact” (p. 8).\n"
      ],
      "id": "ac6b53e1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 直接从数据中计算\n",
        "diff_21 = gave_2.mean() - gave_1.mean()\n",
        "diff_32 = gave_3.mean() - gave_2.mean()\n",
        "\n",
        "# 从 OLS 回归系数中计算\n",
        "coef_diff_21 = ratio_model.params['ratio2']\n",
        "coef_diff_32 = ratio_model.params['ratio3'] - ratio_model.params['ratio2']\n",
        "\n",
        "print(f\"Data-based diff (2:1 - 1:1): {diff_21:.4f}\")\n",
        "print(f\"Data-based diff (3:1 - 2:1): {diff_32:.4f}\")\n",
        "print(f\"Model-based diff (2:1 - 1:1): {coef_diff_21:.4f}\")\n",
        "print(f\"Model-based diff (3:1 - 2:1): {coef_diff_32:.4f}\")"
      ],
      "id": "05e82f26",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Direct vs Model-Based Differences\n",
        "\n",
        "Comparison | Data Difference | Model Coefficient Difference\n",
        "2:1 – 1:1 | +0.0019 | +0.0019\n",
        "3:1 – 2:1 | +0.0001 | +0.0001\n",
        "\n",
        "Both direct comparisons and model-based coefficient differences tell the same story: moving from 1:1 to 2:1 yields a small and statistically insignificant increase, and going from 2:1 to 3:1 yields essentially no change at all.\n",
        "\n",
        "These results suggest that offering a match increases the chance of donation, but increasing the match ratio further does not enhance this effect. In other words, once the donor sees their gift will be matched, the degree of matching is not very motivating. This supports the notion that framing and salience—not just raw incentive size—drive much of charitable behavior.\n",
        "\n",
        "This provides valuable insights for fundraisers: even modest matching offers (1:1) may be just as effective as more expensive ones (2:1 or 3:1) in driving participation.\n",
        "\n",
        "\n",
        "### Size of Charitable Contribution\n",
        "\n",
        "In this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\n",
        "\n",
        "T-test / Regression on Full Sample"
      ],
      "id": "7408b2cf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 线性回归：所有人（包括未捐赠者）\n",
        "X_full = sm.add_constant(df['treat'])\n",
        "y_amount = df['amount']\n",
        "model_full = sm.OLS(y_amount, X_full).fit()\n",
        "\n",
        "print(\"OLS on all individuals:\")\n",
        "print(model_full.summary().tables[1])"
      ],
      "id": "beb03109",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Dependent variable: donation amount (all individuals)\n",
        "\n",
        "Treatment coefficient: +0.154  \n",
        "p-value: 0.063\n",
        "\n",
        "This suggests that offering a matching grant increased the average donation amount by about $0.15. However, the result is only marginally significant (p ≈ 0.063). Since this regression includes non-donors (who gave $0), the result likely reflects the fact that more people gave at all in the treatment group.\n",
        "\n",
        "\n",
        "Regression Conditional on Donation"
      ],
      "id": "1c75866f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 限制在实际有捐款的人\n",
        "df_positive = df[df['gave'] == 1]\n",
        "\n",
        "X_cond = sm.add_constant(df_positive['treat'])\n",
        "y_cond_amount = df_positive['amount']\n",
        "model_cond = sm.OLS(y_cond_amount, X_cond).fit()\n",
        "\n",
        "print(\"\\nOLS on donors only (conditional on giving):\")\n",
        "print(model_cond.summary().tables[1])"
      ],
      "id": "a5bbde60",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Dependent variable: donation amount (only donors)\n",
        "\n",
        "Treatment coefficient: -1.668  \n",
        "p-value: 0.561\n",
        "\n",
        "Among those who actually donated, individuals in the treatment group gave slightly less, on average, than those in the control group—but this difference is small and statistically insignificant.\n",
        "\n",
        "This suggests that the treatment did not affect how much people gave, once they decided to give. The treatment influenced the extensive margin (whether to donate), but not the intensive margin (how much to donate).\n",
        "\n",
        "Causal note: Since we are conditioning on a post-treatment outcome (gave), the regression on donors only does not have a causal interpretation. It is, however, still descriptively valuable.\n",
        "\n",
        "\n",
        "\n",
        "Histograms of Donation Amounts (Among Donors)"
      ],
      "id": "112f55ff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 仅有捐赠的人，按 treatment 分组\n",
        "donors_treat = df_positive[df_positive['treat'] == 1]['amount']\n",
        "donors_ctrl = df_positive[df_positive['treat'] == 0]['amount']\n",
        "\n",
        "# 画图设置\n",
        "fig, ax = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n",
        "\n",
        "# 控制组\n",
        "ax[0].hist(donors_ctrl, bins=30, color='skyblue', edgecolor='black')\n",
        "ax[0].axvline(donors_ctrl.mean(), color='red', linestyle='dashed', linewidth=2)\n",
        "ax[0].set_title(\"Control Group: Donation Amounts\")\n",
        "ax[0].set_xlabel(\"Amount\")\n",
        "ax[0].set_ylabel(\"Number of Donors\")\n",
        "\n",
        "# 处理组\n",
        "ax[1].hist(donors_treat, bins=30, color='lightgreen', edgecolor='black')\n",
        "ax[1].axvline(donors_treat.mean(), color='red', linestyle='dashed', linewidth=2)\n",
        "ax[1].set_title(\"Treatment Group: Donation Amounts\")\n",
        "ax[1].set_xlabel(\"Amount\")\n",
        "\n",
        "plt.suptitle(\"Histograms of Donation Amounts (Among Donors)\", fontsize=14)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "511f3fac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The following histograms show the distribution of donation amounts among donors only, with red dashed lines indicating group-specific average donations.\n",
        "\n",
        "The treatment and control groups show similar right-skewed distributions, with most gifts clustered around $25–$75 and a few very large gifts (e.g., $250 or $400). The average donation was slightly higher in the control group, consistent with the regression results.\n",
        "\n",
        "\n",
        "\n",
        "## Simulation Experiment\n",
        "\n",
        "As a reminder of how the t-statistic behaves under repeated sampling, I simulate the process of comparing two independent groups with known probabilities of donating:\n",
        "\n",
        "Control group: donation follows a Bernoulli distribution with probability p = 0.018\n",
        "\n",
        "Treatment group: donation follows a Bernoulli distribution with probability p = 0.022\n",
        "\n",
        "I simulate the sampling and testing process many times, and observe how the t-statistic behaves under different sample sizes."
      ],
      "id": "5dad7c76"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "\n",
        "# Parameters\n",
        "p_control = 0.018\n",
        "p_treat = 0.022\n",
        "n_sims = 10000\n",
        "sample_sizes = [100, 500, 1000, 5000]\n",
        "\n",
        "# Function: simulate t-stats\n",
        "def simulate_t_stats(n, sims=10000):\n",
        "    t_stats = []\n",
        "    for _ in range(sims):\n",
        "        control = np.random.binomial(1, p_control, size=n)\n",
        "        treat = np.random.binomial(1, p_treat, size=n)\n",
        "        t_stat, _ = stats.ttest_ind(treat, control)\n",
        "        t_stats.append(t_stat)\n",
        "    return t_stats\n",
        "\n",
        "# Run simulations\n",
        "tstat_results = {n: simulate_t_stats(n) for n in sample_sizes}"
      ],
      "id": "3c0758c1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plot sampling distributions\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 8))\n",
        "axes = axes.ravel()\n",
        "\n",
        "for i, n in enumerate(sample_sizes):\n",
        "    axes[i].hist(tstat_results[n], bins=40, density=True, color='skyblue', edgecolor='black')\n",
        "    axes[i].axvline(x=0, color='red', linestyle='--')\n",
        "    axes[i].set_title(f\"Sampling Distribution of t-stat (n = {n})\")\n",
        "    axes[i].set_xlabel(\"t-statistic\")\n",
        "    axes[i].set_ylabel(\"Density\")\n",
        "\n",
        "plt.suptitle(\"Sampling Distribution of t-statistics under Bernoulli Model\", fontsize=14)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "756c7d2c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Interpretation\n",
        "When sample size is small (e.g., n = 100), the t-statistic distribution is wide and noisy — it's hard to tell if there’s a real effect.\n",
        "\n",
        "As sample size increases, the t-statistic distribution becomes narrower, and centered around the true difference (which is small, but positive).\n",
        "\n",
        "This reflects the Law of Large Numbers: sample means converge to the population means.\n",
        "\n",
        "It also illustrates the Central Limit Theorem: the difference in two sample means becomes approximately normally distributed as sample size grows.\n",
        "\n",
        "In other words: with small samples, we might miss a real effect due to noise. But as sample size increases, our estimate of the effect and our test statistics become more stable and reliable.\n",
        "\n",
        "\n",
        "### Law of Large Numbers\n",
        "\n",
        "Visualization: Cumulative Average of Differences"
      ],
      "id": "34d55441"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Simulate draws\n",
        "np.random.seed(42)\n",
        "control_draws = np.random.binomial(1, 0.018, size=100000)\n",
        "treat_draws = np.random.binomial(1, 0.022, size=10000)\n",
        "\n",
        "# Only use first 10,000 for matching length\n",
        "control_sample = control_draws[:10000]\n",
        "\n",
        "# Compute vector of differences (elementwise)\n",
        "diffs = treat_draws - control_sample\n",
        "\n",
        "# Compute cumulative average of differences\n",
        "cum_avg = np.cumsum(diffs) / np.arange(1, len(diffs) + 1)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(cum_avg, label='Cumulative Average of Differences')\n",
        "plt.axhline(0.004, color='red', linestyle='--', label='True Difference (0.004)')\n",
        "plt.title(\"Law of Large Numbers: Cumulative Average of Treatment - Control\")\n",
        "plt.xlabel(\"Number of Samples\")\n",
        "plt.ylabel(\"Cumulative Average Difference\")\n",
        "plt.legend()\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "plt.show()"
      ],
      "id": "f1506b3c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The plot below shows the cumulative average of the differences in donation outcomes between simulated treatment and control groups:\n",
        "\n",
        "\n",
        "Initially, the average fluctuates wildly due to the high variance in small samples. For example, the first few differences swing far above and below the true mean.\n",
        "\n",
        "As the number of samples increases, the cumulative average stabilizes and begins to hover around the true difference of 0.004, indicated by the red dashed line. This illustrates the Law of Large Numbers in practice: the more data we gather, the closer our estimate gets to the truth.\n",
        "\n",
        "### Central Limit Theorem"
      ],
      "id": "9bce45e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Parameters\n",
        "p_c = 0.018\n",
        "p_t = 0.022\n",
        "sample_sizes = [50, 200, 500, 1000]\n",
        "sim_count = 1000\n",
        "\n",
        "# Simulate average differences for each sample size\n",
        "def simulate_avg_diffs(n, sims=1000):\n",
        "    diffs = []\n",
        "    for _ in range(sims):\n",
        "        control = np.random.binomial(1, p_c, size=n)\n",
        "        treatment = np.random.binomial(1, p_t, size=n)\n",
        "        diffs.append(np.mean(treatment) - np.mean(control))\n",
        "    return np.array(diffs)\n",
        "\n",
        "# Run simulations\n",
        "results_clt = {n: simulate_avg_diffs(n) for n in sample_sizes}"
      ],
      "id": "f61eb099",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plot histograms\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 8))\n",
        "axes = axes.ravel()\n",
        "\n",
        "for i, n in enumerate(sample_sizes):\n",
        "    diffs = results_clt[n]\n",
        "    axes[i].hist(diffs, bins=40, color='lightblue', edgecolor='black')\n",
        "    axes[i].axvline(0, color='red', linestyle='--', label='Zero (H₀)')\n",
        "    axes[i].axvline(0.004, color='green', linestyle='-', label='True Difference')\n",
        "    axes[i].set_title(f\"Sample Size = {n}\")\n",
        "    axes[i].set_xlabel(\"Average Difference (Treatment - Control)\")\n",
        "    axes[i].set_ylabel(\"Frequency\")\n",
        "    axes[i].legend()\n",
        "\n",
        "plt.suptitle(\"Sampling Distributions of Difference in Means\\n(Central Limit Theorem)\", fontsize=14)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "2606858e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Interpretation\n",
        "At sample size = 50: The distribution is erratic, skewed, and shows wide dispersion. Zero is right in the center, meaning we likely wouldn't detect a small treatment effect.\n",
        "\n",
        "At sample size = 200: The histogram becomes more symmetric and bell-shaped, and the true effect (green line) begins to emerge away from zero.\n",
        "\n",
        "At sample size = 500: The distribution becomes much smoother and narrower. Zero starts moving toward the tail, suggesting a higher chance of rejecting the null.\n",
        "\n",
        "At sample size = 1000: The distribution is tightly centered near the true difference of 0.004, and zero is well into the left tail—implying we would confidently detect the effect in most samples.\n",
        "\n",
        "These plots visually confirm the Central Limit Theorem: as sample size increases, the sampling distribution of the sample mean difference:\n",
        "\n",
        "Becomes more normal in shape\n",
        "\n",
        "Narrows in spread (reduced variance)\n",
        "\n",
        "Centers around the true mean difference\n"
      ],
      "id": "e1e7aa4a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/danielwang/Library/Python/3.11/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}